/*ASSIGNMENT 1 - Pointers and Functions*/

/*1. Reverse words in a string*/

#include<bits/stdc++.h>
using namespace std;
int main()
{
    string s="TUF is great for interview preparation";
    cout<<"Before reversing words: "<<endl;
    cout<<s<<endl;
    s+=" ";
    stack<string> st;
    int i;
    string str="";
    for(i=0;i<s.length();i++)
    {
        if(s[i]==' ')
        {
            st.push(str);
            str="";
        }
        else str+=s[i];
    }
    string ans="";
    while(st.size()!=1)
    {
        ans+=st.top()+" ";
        st.pop();
    }
    ans+=st.top();// The last word should'nt have a space after it
    cout<<"After reversing words: "<<endl;
    cout<<ans;
    return 0;
}



/*2. Remove outermost parentheses*/

class Solution {
public:
    string removeOuterParentheses(string s) {
        string result;
        int openCount = 0; 
        for (char c : s) {
            if (c == '(') {
                if (openCount > 0) {
                    result += c;
                }
                openCount++;
            } else {
                openCount--;
                if (openCount > 0) {
                    result += c;
                }
            }
        }
        
        return result;
    }
};



/*3. Largest odd number */

class Solution {
public:
    string largestOddNumber(string num) {
        for (int i = num.size() - 1; i >= 0; i--) {
            if ((num[i] - '0') % 2 != 0) {
                return num.substr(0, i + 1);
            }
        }
        return "";
    }
};



/*4. Longest common prefix*/

class Solution {
public:
    string longestCommonPrefix(vector<string>& strs) {
        if (strs.empty()) return ""; 
        string prefix = strs[0]; 
        for (int i = 1; i < strs.size(); i++) {
            int j = 0;
            
            while (j < prefix.size() && j < strs[i].size() && prefix[j] == strs[i][j]) {
                j++;
            }
            
            prefix = prefix.substr(0, j);
            
            if (prefix.empty()) return "";
        }
        
        return prefix;
    }
};



/*5.Isomorphic string */

class Solution {
public:
    bool isIsomorphic(string s, string t) {
        if (s.length() != t.length()) return false; 
        int mapS[256] = {0}; 
        int mapT[256] = {0}; 

        for (int i = 0; i < s.length(); i++) {
            
            char c1 = s[i];
            char c2 = t[i];

            if (mapS[c1] == 0 && mapT[c2] == 0) {
                mapS[c1] = c2;
                mapT[c2] = c1;
            } else {
                
                if (mapS[c1] != c2 || mapT[c2] != c1) {
                    return false;
                }
            }
        }

        return true; 
    }
};



/*6. Rotate string */

class Solution {
public:
    bool rotateString(string s, string goal) {
        if (s.length() != goal.length()) return false; 
        string concatenated = s + s; 
        return concatenated.find(goal) != string::npos; 
    }
};



/*7. Check if two strings are Anagram each other*/

class Solution {
public:
    bool isAnagram(string s, string t) {
        if (s.length() != t.length()) return false; 

        int charCount[26] = {0}; 
        for (char c : s) {
            charCount[c - 'a']++;
        }

        for (char c : t) {
            charCount[c - 'a']--;
        }
        for (int count : charCount) {
            if (count != 0) {
                return false; 
            }
        }

        return true; 
    }
};



/*8. Sort characters by frequency*/

#include <unordered_map>
#include <vector>
#include <algorithm>

class Solution {
public:
    string frequencySort(string s) {
        unordered_map<char, int> freqMap;
        for (char c : s) {
            freqMap[c]++;
        }

        vector<pair<int, char>> freqVec;
        for (auto& entry : freqMap) {
            freqVec.push_back({entry.second, entry.first});
        }

        sort(freqVec.begin(), freqVec.end(), greater<pair<int, char>>());

        string result;
        for (auto& entry : freqVec) {
            result.append(entry.first, entry.second);
        }

        return result;
    }
};



/*9. Maximum nesting depth of the parenthesis*/

class Solution {
public:
    int maxDepth(string s) {
        int currentDepth = 0;
        int maxDepth = 0; 
        for (char c : s) {
            if (c == '(') {
                currentDepth++;
                if (currentDepth > maxDepth) {
                    maxDepth = currentDepth;
                }
            } else if (c == ')') {
                currentDepth--;
            }
        }

        return maxDepth;
    }
};




/*10. Roman to integer and vice versa*/

class Solution {
public:
    int romanToInt(string s) {
        unordered_map<char, int> romanMap = {
            {'I', 1},
            {'V', 5},
            {'X', 10},
            {'L', 50},
            {'C', 100},
            {'D', 500},
            {'M', 1000}
        };

        int total = 0; 
        int n = s.size();

        for (int i = 0; i < n; i++) {
            
            if (i < n - 1 && romanMap[s[i]] < romanMap[s[i + 1]]) {
                total -= romanMap[s[i]];
            } else {
                total += romanMap[s[i]];
            }
        }

        return total;
    }
};




/*11. Implement toi*/

class Solution {
public:
    int myAtoi(string s) {
        int index = 0, sign = 1, total = 0;
        int n = s.size();


        while (index < n && s[index] == ' ') {
            index++;
        }

        if (index < n && (s[index] == '+' || s[index] == '-')) {
            sign = (s[index] == '-') ? -1 : 1;
            index++;
        }

        while (index < n && isdigit(s[index])) {
            int digit = s[index] - '0';

            if (total > (INT_MAX - digit) / 10) {
                return (sign == 1) ? INT_MAX : INT_MIN;
            }

            total = total * 10 + digit;
            index++;
        }

        return total * sign;
    }
};



/*12. Count number of substrings*/

#include <unordered_map>
#include <string>
using namespace std;

class Solution {
public:
    int atMostKDistinct(const string& s, int K) {
        unordered_map<char, int> freqMap;
        int start = 0, count = 0;

        for (int end = 0; end < s.size(); ++end) {
            if (++freqMap[s[end]] == 1) {
                --K;
            }

            while (K < 0) {
                if (--freqMap[s[start]] == 0) {
                    ++K;
                }
                ++start;
            }

            count += (end - start + 1);
        }

        return count;
    }

    int substrCount(string S, int K) {
        if (K == 0) return 0;
        return atMostKDistinct(S, K) - atMostKDistinct(S, K - 1);
    }
};



/*13. Longest palindromic substring*/

class Solution {
public:
    string longestPalindrome(string s) {
        if (s.empty()) return "";

        int start = 0, maxLength = 1;
        int n = s.size();

        for (int i = 0; i < n; ++i) {
          
            int len1 = expandAroundCenter(s, i, i);
           
            int len2 = expandAroundCenter(s, i, i + 1);
            
            int len = max(len1, len2);
            if (len > maxLength) {
                maxLength = len;
                start = i - (maxLength - 1) / 2;
            }
        }

        return s.substr(start, maxLength);
    }

private:
    int expandAroundCenter(const string& s, int left, int right) {
        while (left >= 0 && right < s.size() && s[left] == s[right]) {
            --left;
            ++right;
        }
        return right - left - 1;
    }
};



/*14. Sum of beauty of all substrings*/

#include <string>
#include <unordered_map>
#include <algorithm>
using namespace std;

class Solution {
public:
    int beautySum(string s) {
        int n = s.size();
        int totalBeauty = 0;

        for (int i = 0; i < n; ++i) {
            unordered_map<char, int> freqMap;
            
            for (int j = i; j < n; ++j) {
                freqMap[s[j]]++;
                
                int maxFreq = 0, minFreq = INT_MAX;
                for (const auto& entry : freqMap) {
                    maxFreq = max(maxFreq, entry.second);
                    minFreq = min(minFreq, entry.second);
                }
                
                totalBeauty += (maxFreq - minFreq);
            }
        }
        
        return totalBeauty;
    }
};



/*15. Reverse words in a string*/

#include <string>
#include <sstream>
#include <vector>
using namespace std;

class Solution {
public:
    string reverseWords(string s) {
       
        size_t start = 0;
        while (start < s.size() && s[start] == ' ') {
            ++start;
        }
        size_t end = s.size();
        while (end > start && s[end - 1] == ' ') {
            --end;
        }
        
        string trimmed = s.substr(start, end - start);

        istringstream iss(trimmed);
        vector<string> words;
        string word;
        while (iss >> word) {
            words.push_back(word);
        }
        
        reverse(words.begin(), words.end());
       
        string result;
        for (size_t i = 0; i < words.size(); ++i) {
            if (i > 0) {
                result += ' ';
            }
            result += words[i];
        }
        
        return result;
    }
};







